<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="GradeMapper">
	<resultMap type="Grade" id="gradeResultMap">
		<id property="lectureNo" column="LECTURE_NO"/>
		<result property="studentNo" column="STUDENT_NO"/>
		<result property="gradeYear" column="GRADE_YEAR"/>
		<result property="gradeSession" column="GRADE_SESSION"/>
		<result property="gradeSubject" column="GRADE_SUBJECT"/>
		<result property="gradeComplete" column="LECTURE_DIVISION"/>
		<result property="lectureGrade" column="LECTURE_GRADE"/>
		<result property="gradeScore" column="GRADE_SCORE"/>
		<result property="gradeAvg" column="GRADE_AVG"/>
		<result property="gradeFeedback" column="GRADE_FEEDBACK"/>
		<result property="gradeObjection" column="GRADE_OBJECTION"/>
		<result property="gradeChange" column="GRADE_CHANGE"/>
		<result property="objectionContent" column="OBJECTION_CONTENT"/>
		<result property="feedbackContent" column="FEEDBACK_CONTENT"/>
		<result property="studentName" column="STUDENT_NAME"/>
	</resultMap>
	
	<!-- 학생 -->
	<select id="selectGradeStudent" resultMap="gradeResultMap" parameterType="hashMap">
		SELECT * FROM GRADE_TBL WHERE STUDENT_NO = #{studentNo}
		<if test='!year.equals("전체")'>
			AND GRADE_YEAR = #{year}
		</if>
		<if test='!season.equals("전체")'>
			AND GRADE_SESSION = #{season}
		</if>
	</select>
	
	<select id="selectFeedbackStudent" resultMap="gradeResultMap">
		SELECT * FROM GRADE_OBJECTION O
		INNER JOIN GRADE_TBL G ON
		(G.STUDENT_NO = O.STUDENT_NO AND G.LECTURE_NO = O.LECTURE_NO AND O.STUDENT_NO = #{studentNo}
		<if test='!year.equals("전체")'>
			AND G.GRADE_YEAR = #{year}
		</if>
		<if test='!season.equals("전체")'>
			AND G.GRADE_SESSION = #{season}
		</if>
		)
		LEFT JOIN FEEDBACK_TBL F ON (F.STUDENT_NO = O.STUDENT_NO AND F.LECTURE_NO = O.LECTURE_NO)
	</select>
	
	<insert id="insertObjection">
			BEGIN
			INSERT INTO GRADE_OBJECTION VALUES(#{lectureNo}, #{studentNo}, #{objectionContent});
			
			UPDATE GRADE_TBL SET GRADE_OBJECTION = 'Y'
			WHERE STUDENT_NO = #{studentNo} AND LECTURE_NO = #{lectureNo};
		END;
	</insert>
	
	<!-- 교수 -->
	<!-- 교과목 불러오기 -->
	<select id="selectSubject" resultMap="gradeResultMap" parameterType="hashMap">
		SELECT DISTINCT GRADE_SUBJECT FROM GRADE_TBL
		WHERE PROFESSOR_NO = #{professorNo}
		<if test='!year.equals("전체")'>
			AND GRADE_YEAR = #{year}
		</if>
		<if test='!season.equals("전체")'>
			AND GRADE_SESSION = #{season}
		</if>
	</select>
	
	<!-- 교수의 성적조회 -->
	<select id="selectGradeProfessor" resultMap="gradeResultMap" parameterType="hashMap">
		SELECT * FROM GRADE_TBL G
		INNER JOIN STUDENT_TBL S ON
		(G.STUDENT_NO = S.STUDENT_NO AND G.PROFESSOR_NO = #{professorNo}
		<if test='!year.equals("전체")'>
			AND G.GRADE_YEAR = #{year}
		</if>
		<if test='!season.equals("전체")'>
			AND G.GRADE_SESSION = #{season}
		</if>
		<if test='!subject.equals("전체")'>
			AND G.GRADE_SUBJECT = #{subject}
		</if>
		)
	</select>
	
	<!-- 교수의 이의신청 조회 -->
	<select id="selectFeedbackProfessor" resultMap="gradeResultMap">
		SELECT * FROM GRADE_OBJECTION O
		JOIN GRADE_TBL G ON
		(G.STUDENT_NO = O.STUDENT_NO AND G.LECTURE_NO = O.LECTURE_NO AND G.PROFESSOR_NO = #{professorNo}
		<if test='!year.equals("전체")'>
			AND G.GRADE_YEAR = #{year}
		</if>
		<if test='!season.equals("전체")'>
			AND G.GRADE_SESSION = #{season}
		</if>
		<if test='!subject.equals("전체")'>
			AND G.GRADE_SUBJECT = #{subject}
		</if>
		)
		LEFT JOIN FEEDBACK_TBL F ON (F.STUDENT_NO = O.STUDENT_NO AND F.LECTURE_NO = O.LECTURE_NO)
        LEFT JOIN STUDENT_TBL S ON (S.STUDENT_NO = O.STUDENT_NO)
	</select>
	
	<update id="updateGrade">
		UPDATE GRADE_TBL
		SET GRADE_SCORE = #{gradeScore}, GRADE_AVG = #{gradeAvg}
		WHERE STUDENT_NO = #{studentNo} AND LECTURE_NO = #{lectureNo}
	</update>

	<insert id="insertFeedBack">
		MERGE INTO FEEDBACK_TBL
		USING DUAL ON
		(STUDENT_NO = #{studentNo} AND LECTURE_NO = #{lectureNo})
		WHEN MATCHED THEN
		UPDATE SET
		FEEDBACK_CONTENT = #{feedbackContent}
		WHEN NOT MATCHED THEN
		INSERT VALUES
		( #{lectureNo} , #{studentNo} , #{feedbackContent} , DEFAULT)
	</insert>
</mapper>