1.객체지향 프로그래밍이란
-oop란 무엇인가
클래스를 나눠서 서로 관계를 맺고 프로그래밍 객체지향 프로그래밍

데이터를 객체 취금, 현실세계에 있는 것들을 프로그래밍화,

데이터를 객체로 취급해서 현실세계에 잇는 것 들을 프로그래밍하고
객체의 상호작용을 통해 프로그래밍하는 것을 말합니다 객체지향
프로그래밍을 재사용성이 용이하고 유지보수가 뛰어나다
단점으로는 설계하는데 시간이 많이 걸릴 수 있다
특징(캡슐화,추상화,다향성.........)
--------------------------------------------------------------------
2.JVM역활
자바 동작원를 아는가?
.java -> .class(바이트코드) -> JVM 실행 = 자바코드를 컴파일하면 바이트코드가 되는데 이것을  JVM이 실행해서동작하도록 해줍니다
JVM은 운영체제와 상관없이 자바코드를 실행하게 해준다
JVM -> write once, run everywhre
--------------------------------------------------------------------
3.자바의 메모리 영역
Stack, Heap, Static
변수, 객체, static
개발자 코드에서 선언한 변수가 할당되는 공간
동적할당,객체 생성이 되었을 때 할당되는 공간
static
JVM이 실행이 되지마자 할당할 때 사용되는 공간
메서드 영역
코드에서 사용되는 클래스 정보들이 할당되는 영역
--------------------------------------------------------------------
4.상속 과 컴포지션 차이
상속: 자식클래스가 부모글래스의 속성 및 동작(멤버변수,메소드)를
사용할 수 있게 된다
공통되는 부분을 묶을 수 있다.(추상화)
클래스간의 상호작용을 하는데 있어서 포함하는 관계를 나타냅니다
--------------------------------------------------------------------
5.인터페이스 와 추상클래스
-차이점
추상클래스는 왜 추상클래스?? 추상메소드가 있어서 추상클래스다 
추상클래스는 추상메소드 외에 일반적인 메소드와 속성을 가질 수 있음
인터페이스는 추상메소드를 가지고 있는데 그외에 것(일반 메소드,속성)
을 가질 수가 없다.
-공통점
자신의 생성자로 객체 생성 불가능
public interface NoticeService{
    public int registerNotice();

    public void printStatus() {}; X
}

new Notice(); X
public abstract class Notice {
    public abstract int registerNotice;
    public void printNoticeStatus() {}
}
--------------------------------------------------------------------
6.다향성
하나의 메소드나 클래스가 있을 때 다양한 방법으로 동작하는 것을 의미한다
->하나의 메소드가 다양한 방법으로 동작하는 것을 의미한다
1.결합도
NoticeServiceImpl - NoticeStore - NoticeStoreLogic
                                           - NoticeDaoLogic
                                           - NoticeBackLogic
public calss NoticeServiceImpl {
    //private NoticeStoreLogic nStore;
    private NoticeStore nStore;

    nStore.registerNotice();
}
-업캐스팅, 다운캐스팅
업캐스팅 : 부모클래스 타입의 변수에 자식클래스의 객체를 다룰 수 있는 것
다운캐스팅 : 부모클래스 타입의 변수는 부모의 것을 사용할수 있는데 자식의 것을 사용하기
위해 했던 것
Car car = new Sonata();
car.drive();
car.turnOnLight();
((Sonata)car).sonataBoost();
-오버로딩, 오버라이딩
오버로딩:
public void printMessage(Strin msg) {};
public void printMessage() {};
public void printMessage(int num) {};
public void printMessage(String msg, int num) {};

오버라이딩
public void printMessage(Strin msg) {
    System.out.println("오버라이딩");
}
--------------------------------------------------------------------
7.Servlet과 JSP를 비고해서 설명하세요
Servlet : java코드 안에 html코드가 사용된다

JSP : html코드안에 java코드가 사용된다
->Java Server Page : html내부, java코드(스크립틀릿), Servlet 단점을 보완 서블릿
기반 스크립트 기술, <%%>
JSP가 동작될 때에는 Servlet 코드 변환되서 동작
-차이점 : Servlet의 경우 DB통신, 비즈니스 로직 호출 데이터를 읽고
쓰는 작업에 유리하며, JSP의 경우 View로서 사용 되기에 유리하다는
차이점이 있다.
--------------------------------------------------------------------
8.MVC1이랑MVC2의 패턴 차이에 대해 설명하세요
Model	Model	View	Controller
View
Controller
--------------------------------------------------------------------
9.DAO와DTO 차이에 대해 설명하세요
DAO(Store) : DB의 데이터를 접근하기 위한 객체,
비즈니스 로직, DB 접근하기 위한 로직
DTO(Domain) : DB에서 가져온 데이터를 매핑해주는 역활
,계층 간 데이터 교환을 위한 객체(자바 beans)


































































































